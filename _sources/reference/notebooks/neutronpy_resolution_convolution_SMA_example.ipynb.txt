{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Resolution Convolution (SMA) Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from neutronpy import Instrument, Sample\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "matplotlib version:  2.0.0\n",
      "numpy version:  1.12.1\n",
      "neutronpy version:  1.0.3\n"
     ]
    }
   ],
   "source": [
    "import matplotlib as mpl\n",
    "import neutronpy as npy\n",
    "\n",
    "print('matplotlib version: ', mpl.__version__)\n",
    "print('numpy version: ', np.__version__)\n",
    "print('neutronpy version: ', npy.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def dispersion(p, h, k, l):\n",
    "    '''Returns energy of peak for given HKL'''\n",
    "    return p[0] / np.sqrt(2.) * np.sqrt(3. - np.cos(2. * np.pi * h) - np.cos(2. * np.pi * k) - np.cos(2. * np.pi * l)) \n",
    "\n",
    "def sqw1(H, K, L, p):\n",
    "    '''Calculated S(Q,w)'''\n",
    "    w0 = dispersion(p, H, K, L)  # Dispersion given HKL\n",
    "\n",
    "    bf = 1. / (1. - np.exp(-w0 / (0.086173 * 300)))  # Bose factor @ 300 K\n",
    "    S = 1. / w0 * bf  # Intensity of dispersion\n",
    "\n",
    "    HWHM = np.zeros(H.shape)  # HWHM (intrinsic energy width)\n",
    "\n",
    "    w0 = w0[np.newaxis, ...]  # -> Column vector    \n",
    "    S = S[np.newaxis, ...]  # -> Column vector\n",
    "    HWHM = HWHM[np.newaxis, ...]  # -> Column vector\n",
    "\n",
    "    return [w0, S, HWHM]\n",
    "\n",
    "def pref1(H, K, L, W, EXP, p):\n",
    "    '''Prefactor (constant multiplier, if you want background, \n",
    "       return it as second output arg e.g.[pref, bg]) and set nargout=2 \n",
    "       in convolution call'''\n",
    "    return np.ones(H.shape)[np.newaxis, ...]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sample = Sample(4., 4., 4., 90, 90, 90, mosaic=60., u=[1, 0, 0], v=[0, 1, 0])\n",
    "\n",
    "instr = Instrument(efixed=14.7, sample=sample, hcol=[50, 80, 50, 120], ana='PG(002)', mono='PG(002)', \n",
    "                   moncor=1, mono_mosaic=35., ana_mosaic=35.)\n",
    "\n",
    "instr.mono.dir = 1\n",
    "instr.sample.dir = -1\n",
    "instr.ana.dir = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "eValues = np.arange(0., 15., 0.03)\n",
    "H = 2. * np.ones(eValues.shape)  # H=2\n",
    "K = -0.18 * np.ones(eValues.shape)  # K=-0.18\n",
    "L = np.zeros(eValues.shape)  # L=0\n",
    "\n",
    "q = np.array([H, K, L, eValues])  # q = [2, -0.18, 0, eValues]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "output_fix = instr.resolution_convolution_SMA(sqw1, pref1, 1, q, METHOD='fix', ACCURACY=[5,5], p=[15])  # Fixed sample method\n",
    "\n",
    "output_mc = instr.resolution_convolution_SMA(sqw1, pref1, 1, q, METHOD='mc', ACCURACY=[5], p=[15])  # Monte Carlo Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x11adb2860>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11ad857b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "\n",
    "ax.plot(eValues, output_fix, 'o', mfc='w')\n",
    "ax.plot(eValues, output_mc, 's', mfc='w')\n",
    "\n",
    "ax.set_xlabel('Energy')\n",
    "ax.set_ylabel('Intensity')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
